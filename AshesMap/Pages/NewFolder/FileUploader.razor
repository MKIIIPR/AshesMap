@inject IJSRuntime JSRuntime;
@implements IAsyncDisposable

<div @ref="fileDropContainer" class="file-drop-zone @HoverClass"
     @ondragenter="OnDragEnter"
     @ondragleave="OnDragLeave" @ondragover="OnDragEnter">
    <InputFile @ref="inputFile" multiple OnChange="@OnChange" />
</div>

<MudButton OnClick="PasteImageFromClipboard">📋 Bild einfügen</MudButton>

<div class="image-container">
    @foreach (var imageSource in imageSources)
    {
        <img src="@imageSource" style="max-width: 200px; height: auto;" />
    }
</div>

@code {
    [Parameter] public EventCallback<string> OnImageUploaded { get; set; } // Übergabe des Bildes an das Parent
    private const int maxAllowedSize = 8 * 1024 * 1024; // 8 MB
    private List<string> imageSources = new List<string>();
    private string HoverClass = string.Empty;
    private ElementReference fileDropContainer;
    InputFile? inputFile;

    IJSObjectReference? _clipboardModule;

    void OnDragEnter(DragEventArgs e) => HoverClass = "hover";
    void OnDragLeave(DragEventArgs e) => HoverClass = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Importiere das Clipboard-Modul für das Einfügen von Bildern
            _clipboardModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/clipboard.js");
        }
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            using var stream = file.OpenReadStream(maxAllowedSize);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var base64Image = $"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}";
            imageSources.Add(base64Image);

            // Bild an das Parent weitergeben
            await OnImageUploaded.InvokeAsync(base64Image);
        }
    }

    private async Task PasteImageFromClipboard()
    {
        if (_clipboardModule != null)
        {
            // Wenn das Bild aus der Zwischenablage kommt, übergebe es an das Parent
            await _clipboardModule.InvokeVoidAsync("getClipboardImage", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public Task OnImagePasted(string base64Image)
    {
        var imageSrc = $"data:image/png;base64,{base64Image}";
        imageSources.Add(imageSrc);

        // Bild an das Parent weitergeben
        OnImageUploaded.InvokeAsync(imageSrc);

        StateHasChanged(); // UI aktualisieren
        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        if (_clipboardModule is not null)
        {
            await _clipboardModule.DisposeAsync();
        }
    }
}
